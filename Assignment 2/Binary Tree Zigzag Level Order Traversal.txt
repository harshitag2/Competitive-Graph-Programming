class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        // If the tree is empty, return an empty result
        if (!root) return {};

        // Create a queue to store nodes to be processed
        queue<TreeNode*> q;
        q.push(root);

        // Create a result vector to store the zigzag level order traversal
        vector<vector<int>> result;

        // Create a flag to alternate the direction of the traversal
        bool isLeftToRight = true;

        // Process the nodes level by level
        while (!q.empty()) {
            // Get the number of nodes at the current level
            int levelSize = q.size();

            // Create a vector to store the node values at the current level
            vector<int> level;

            // Process the nodes at the current level
            for (int i = 0; i < levelSize; i++) {
                // Get the next node from the queue
                TreeNode* node = q.front();
                q.pop();

                // Add the node value to the level vector
                if (isLeftToRight) {
                    level.push_back(node->val);
                } else {
                    level.insert(level.begin(), node->val);
                }

                // Add the node's children to the queue
                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }

            // Add the level vector to the result
            result.push_back(level);

            // Toggle the direction flag
            isLeftToRight =!isLeftToRight;
        }

        // Return the result
        return result;
    }
};