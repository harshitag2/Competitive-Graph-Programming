class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        // base case: if the root is null, return null
        if (!root) {
            return nullptr;
        }

        // if the root is either p or q, return the root
        if (root == p || root == q) {
            return root;
        }

        // recursively search for p and q in the left subtree
        TreeNode* leftLCA = lowestCommonAncestor(root->left, p, q);

        // recursively search for p and q in the right subtree
        TreeNode* rightLCA = lowestCommonAncestor(root->right, p, q);

        // if both p and q are found in different subtrees, return the root
        if (leftLCA && rightLCA) {
            return root;
        }

        // if only one of p or q is found, return that node
        return leftLCA ? leftLCA : rightLCA;
    }
};